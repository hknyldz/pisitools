diff -Naur pisi~/api.py pisi/api.py
--- pisi~/api.py        2011-06-17 13:30:47.000000000 +0200
+++ pisi/api.py 2014-06-05 20:57:27.839756370 +0200
@@ -25,7 +25,7 @@
 import pisi.pgraph as pgraph
 import pisi.db.packagedb
 import pisi.db.repodb
-import pisi.db.filesdb
+import pisi.db.filesldb
 import pisi.db.installdb
 import pisi.db.historydb
 import pisi.db.sourcedb
@@ -401,7 +401,7 @@
 
     >>> [("kvm", (["lib/modules/2.6.18.8-86/extra/kvm-amd.ko","lib/modules/2.6.18.8-86/extra/kvm-intel.ko"])),]
     """
-    filesdb = pisi.db.filesdb.FilesDB()
+    filesdb = pisi.db.filesldb.FilesLDB()
     if term.startswith("/"): # FIXME: why? why?
         term = term[1:]
     return filesdb.search_file(term)
@@ -868,17 +868,8 @@
 
 # FIXME: rebuild_db is only here for filesdb and it really is ugly. we should not need any rebuild.
 @locked
-def rebuild_db(files=False):
-
-    filesdb = pisi.db.filesdb.FilesDB()
-    installdb = pisi.db.installdb.InstallDB()
-
-    def rebuild_filesdb():
-        for pkg in list_installed():
-            ctx.ui.info(_('Adding \'%s\' to db... ') % pkg, noln=True)
-            files = installdb.get_files(pkg)
-            filesdb.add_files(pkg, files)
-            ctx.ui.info(_('OK.'))
+def rebuild_db():
+    filesdb = pisi.db.filesldb.FilesLDB()
 
     # save parameters and shutdown pisi
     options = ctx.config.options
@@ -888,16 +879,13 @@
 
     filesdb.close()
     filesdb.destroy()
-    filesdb.init()
+    filesdb = pisi.db.filesldb.FilesLDB()
 
     # reinitialize everything
     set_userinterface(ui)
     set_options(options)
     set_comar(comar)
 
-    # construct new database
-    rebuild_filesdb()
-
 ############# FIXME: this was a quick fix. ##############################
 
 # api was importing other module's functions and providing them as api functions. This is wrong.
diff -Naur pisi~/atomicoperations.py pisi/atomicoperations.py
--- pisi~/atomicoperations.py	2014-06-01 15:10:14.000000000 +0200
+++ pisi/atomicoperations.py	2014-06-04 21:30:35.167693988 +0200
@@ -134,11 +134,14 @@
         self.metadata = self.package.metadata
         self.files = self.package.files
         self.pkginfo = self.metadata.package
-        self.filesdb = pisi.db.filesdb.FilesDB()
+        self.filesdb = pisi.db.filesldb.FilesLDB()
         self.installdb = pisi.db.installdb.InstallDB()
         self.operation = INSTALL
         self.store_old_paths = None
 
+    def __del__(self):
+        self.filesdb.close()
+
     def install(self, ask_reinstall = True):
 
         # Any package should remove the package it replaces before
@@ -183,7 +186,7 @@
     def check_replaces(self):
         for replaced in self.pkginfo.replaces:
             if self.installdb.has_package(replaced.package):
-                pisi.operations.remove.remove_replaced_packages([replaced.package])
+                pisi.operations.remove.remove_replaced_packages([replaced.package], filesdb=self.filesdb)
 
     def check_versioning(self, version, release):
         try:
@@ -212,8 +215,8 @@
         # check file conflicts
         file_conflicts = []
         for f in self.files.list:
-            if self.filesdb.has_file(f.path):
-                pkg, existing_file = self.filesdb.get_file(f.path)
+            pkg, existing_file = self.filesdb.get_file(f.path)
+            if pkg:
                 dst = pisi.util.join_path(ctx.config.dest_dir(), f.path)
                 if pkg != self.pkginfo.name and not os.path.isdir(dst) and really_conflicts(pkg):
                     file_conflicts.append( (pkg, existing_file) )
@@ -279,7 +282,7 @@
             self.old_files = self.installdb.get_files(pkg.name)
             self.old_pkginfo = self.installdb.get_info(pkg.name)
             self.old_path = self.installdb.pkg_dir(pkg.name, iversion_s, irelease_s)
-            self.remove_old = Remove(pkg.name, store_old_paths = self.store_old_paths)
+            self.remove_old = Remove(pkg.name, store_old_paths = self.store_old_paths, filesdb = self.filesdb)
             self.remove_old.run_preremove()
             self.remove_old.run_postremove()
 
@@ -451,7 +454,7 @@
                     if os.path.samestat(new_file_stat, old_file_stat):
                         break
                 else:
-                    Remove.remove_file(old_file, self.pkginfo.name, store_old_paths=self.store_old_paths)
+                    Remove.remove_file(old_file, self.pkginfo.name, store_old_paths=self.store_old_paths, filesdb=self.filesdb)
 
         if self.reinstall():
             # get 'config' typed file objects
@@ -509,7 +512,7 @@
     def update_databases(self):
         "update databases"
         if self.reinstall():
-            self.remove_old.remove_db()
+            self.remove_old.remove_db(filesdb=self.filesdb)
 
         if self.config_later:
             self.installdb.mark_pending(self.pkginfo.name)
@@ -559,10 +562,10 @@
 
 class Remove(AtomicOperation):
 
-    def __init__(self, package_name, ignore_dep = None, store_old_paths = None):
+    def __init__(self, package_name, ignore_dep = None, store_old_paths = None, filesdb = None):
         super(Remove, self).__init__(ignore_dep)
         self.installdb = pisi.db.installdb.InstallDB()
-        self.filesdb = pisi.db.filesdb.FilesDB()
+        self.filesdb = filesdb
         self.package_name = package_name
         self.package = self.installdb.get_package(self.package_name)
         self.store_old_paths = store_old_paths
@@ -574,9 +577,10 @@
             ctx.ui.warning(_('File list could not be read for package %s, continuing removal.') % package_name)
             self.files = pisi.files.Files()
 
-    def run(self):
+    def run(self, filesdb = None):
         """Remove a single package"""
 
+        if filesdb: self.filesdb = filesdb
         ctx.ui.status(_('Removing package %s') % self.package_name)
         ctx.ui.notify(pisi.ui.removing, package = self.package, files = self.files)
         if not self.installdb.has_package(self.package_name):
@@ -587,7 +591,7 @@
 
         self.run_preremove()
         for fileinfo in self.files.list:
-            self.remove_file(fileinfo, self.package_name, True)
+            self.remove_file(fileinfo, self.package_name, True, filesdb=filesdb)
 
         self.run_postremove()
 
@@ -605,7 +609,7 @@
         # is there any package who depends on this package?
 
     @staticmethod
-    def remove_file(fileinfo, package_name, remove_permanent=False, store_old_paths=None):
+    def remove_file(fileinfo, package_name, remove_permanent=False, store_old_paths=None, filesdb=None):
 
         if fileinfo.permanent and not remove_permanent:
             return
@@ -613,16 +617,16 @@
         fpath = pisi.util.join_path(ctx.config.dest_dir(), fileinfo.path)
 
         historydb = pisi.db.historydb.HistoryDB()
-        filesdb = pisi.db.filesdb.FilesDB()
         # we should check if the file belongs to another
         # package (this can legitimately occur while upgrading
         # two packages such that a file has moved from one package to
         # another as in #2911)
-        if filesdb.has_file(fileinfo.path):
-            pkg, existing_file = filesdb.get_file(fileinfo.path)
-            if pkg != package_name:
-                ctx.ui.warning(_('Not removing conflicted file : %s') % fpath)
-                return
+        if not filesdb:
+            filesdb = pisi.db.filesldb.FilesLDB()
+        pkg, existing_file = filesdb.get_file(fileinfo.path)
+        if pkg and not pkg == package_name:
+            ctx.ui.warning(_('Not removing conflicted file : %s') % fpath)
+            return
 
         if fileinfo.type == ctx.const.conf:
             # config files are precious, leave them as they are
@@ -686,16 +690,17 @@
     def remove_pisi_files(self):
         util.clean_dir(self.package.pkg_dir())
 
-    def remove_db(self):
+    def remove_db(self, filesdb=None):
         self.installdb.remove_package(self.package_name)
-        self.filesdb.remove_files(self.files.list)
+        if not filesdb: self.filesdb.remove_files(self.files.list)
+        else: filesdb.remove_files(self.files.list)
 # FIX:DB
 #         # FIXME: something goes wrong here, if we use ctx operations ends up with segmentation fault!
 #         pisi.db.packagedb.remove_tracking_package(self.package_name)
 
 
-def remove_single(package_name):
-    Remove(package_name).run()
+def remove_single(package_name, filesdb=None):
+    Remove(package_name).run(filesdb=filesdb)
 
 def build(package):
     # wrapper for build op
diff -Naur pisi~/cli/rebuilddb.py pisi/cli/rebuilddb.py
--- pisi~/cli/rebuilddb.py	2011-05-26 19:17:29.000000000 +0200
+++ pisi/cli/rebuilddb.py	2014-06-04 20:40:22.196804076 +0200
@@ -49,4 +49,4 @@
     def run(self):
         self.init(database=True)
         if ctx.ui.confirm(_('Rebuild PiSi databases?')):
-            pisi.api.rebuild_db(ctx.get_option('files'))
+            pisi.api.rebuild_db()
diff -Naur pisi~/constants.py pisi/constants.py
--- pisi~/constants.py	2014-03-07 23:03:46.000000000 +0100
+++ pisi/constants.py	2014-06-03 23:03:17.000000000 +0200
@@ -96,6 +96,7 @@
         self.__c.needs_restart = "needsrestart"
         self.__c.needs_reboot = "needsreboot"
         self.__c.files_db = "files.db"
+        self.__c.files_ldb = "files.ldb"
         self.__c.repos = "repos"
         self.__c.devel_package_end = "-devel"
         self.__c.doc_package_end = "-docs?$"
diff -Naur pisi~/db/filesldb.py pisi/db/filesldb.py
--- /dev/null	2014-06-04 21:17:17.154723146 +0200
+++ pisi/db/filesldb.py	2014-06-04 21:17:17.154723146 +0200
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+#
+# Copyright (C) 2014, Marcin Bojara
+#
+# This program is free software; you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free
+# Software Foundation; either version 2 of the License, or (at your option)
+# any later version.
+#
+# Please read the COPYING file.
+#
+
+import os
+import re
+import plyvel
+import hashlib
+
+import gettext
+__trans = gettext.translation('pisi', fallback=True)
+_ = __trans.ugettext
+
+import pisi
+import pisi.context as ctx
+
+class FilesLDB ():
+    def __init__(self):
+        self.files_ldb_path = os.path.join(ctx.config.info_dir(), ctx.const.files_ldb)
+        self.filesdb = plyvel.DB(self.files_ldb_path, create_if_missing=True)
+        if not [f for f in os.listdir(self.files_ldb_path) if f.endswith('.ldb')]:
+            self.destroy()
+            self.create_filesdb()
+
+    def __del__(self):
+        self.close()
+
+    def create_filesdb(self):
+        ctx.ui.info(pisi.util.colorize(_('Creating files database...'), 'green'))
+        installdb = pisi.db.installdb.InstallDB()
+        for pkg in installdb.list_installed():
+            ctx.ui.info(_('Adding \'%s\' to db... ') % pkg, noln=True)
+            files = installdb.get_files(pkg)
+            self.add_files(pkg, files)
+            ctx.ui.info(_('OK.'))
+        ctx.ui.info(pisi.util.colorize(_('done.'), 'green'))
+
+    def get_file(self, path):
+        return self.filesdb.get(hashlib.md5(path).digest()), path
+
+    def search_file(self, term):
+        pkg, path = self.get_file(term)
+        if pkg:
+            return [(pkg,[path])]
+
+        installdb = pisi.db.installdb.InstallDB()
+        found = []
+        for pkg in installdb.list_installed():
+            files_xml = open(os.path.join(installdb.package_path(pkg), ctx.const.files_xml)).read()
+            paths = re.compile('<Path>(.*?%s.*?)</Path>' % re.escape(term), re.I).findall(files_xml)
+            if paths:
+                found.append((pkg, paths))
+        return found
+
+    def add_files(self, pkg, files):
+        for f in files.list:
+            self.filesdb.put(hashlib.md5(f.path).digest(), pkg)
+
+    def remove_files(self, files):
+        for f in files:
+            self.filesdb.delete(hashlib.md5(f.path).digest())
+
+    def destroy(self):
+        ctx.ui.info(pisi.util.colorize(_('Cleaning files database folder... '), 'green'), noln=True)
+        for f in os.listdir(self.files_ldb_path): os.unlink(os.path.join(self.files_ldb_path, f))
+        ctx.ui.info(pisi.util.colorize(_('done.'), 'green'))
+
+    def close(self):
+        if not self.filesdb.closed: self.filesdb.close()
diff -Naur pisi~/__init__.py pisi/__init__.py
--- pisi~/__init__.py	2011-08-04 15:24:50.000000000 +0200
+++ pisi/__init__.py	2014-06-04 21:30:39.684693823 +0200
@@ -59,9 +59,9 @@
         ctx.loghandler.flush()
         ctx.log.removeHandler(ctx.loghandler)
 
-    filesdb = pisi.db.filesdb.FilesDB()
-    if filesdb.is_initialized():
-        filesdb.close()
+#    filesdb = pisi.db.filesdb.FilesDB()
+#    if filesdb.is_initialized():
+#        filesdb.close()
 
     if ctx.build_leftover and os.path.exists(ctx.build_leftover):
         os.unlink(ctx.build_leftover)
diff -Naur pisi~/operations/install.py pisi/operations/install.py
--- pisi~/operations/install.py	2011-05-26 19:17:29.000000000 +0200
+++ pisi/operations/install.py	2014-06-03 23:03:17.000000000 +0200
@@ -95,6 +95,7 @@
         ctx.ui.info(util.colorize(_("Downloading %d / %d") % (order.index(x)+1, len(order)), "yellow"))
         install_op = atomicoperations.Install.from_name(x)
         paths.append(install_op.package_fname)
+        install_op = None
 
     # fetch to be installed packages but do not install them.
     if ctx.get_option('fetch_only'):
@@ -107,6 +108,7 @@
         ctx.ui.info(util.colorize(_("Installing %d / %d") % (paths.index(path)+1, len(paths)), "yellow"))
         install_op = atomicoperations.Install(path)
         install_op.install(False)
+        install_op = None
 
     return True
 
diff -Naur pisi~/operations/remove.py pisi/operations/remove.py
--- pisi~/operations/remove.py	2011-05-26 19:17:29.000000000 +0200
+++ pisi/operations/remove.py	2014-06-03 23:03:17.000000000 +0200
@@ -24,9 +24,11 @@
 import pisi.ui as ui
 import pisi.db
 
-def remove(A, ignore_dep = False, ignore_safety = False):
+def remove(A, ignore_dep = False, ignore_safety = False, filesdb = None):
     """remove set A of packages from system (A is a list of package names)"""
 
+    if not filesdb: filesdb = pisi.db.filesldb.FilesLDB()
+
     componentdb = pisi.db.componentdb.ComponentDB()
     installdb = pisi.db.installdb.InstallDB()
 
@@ -80,7 +82,7 @@
 
     for x in order:
         if installdb.has_package(x):
-            atomicoperations.remove_single(x)
+            atomicoperations.remove_single(x, filesdb=filesdb)
         else:
             ctx.ui.info(_('Package %s is not installed. Cannot remove.') % x)
 
@@ -127,6 +129,6 @@
         if remove(obsoletes, ignore_dep=True, ignore_safety=True):
             raise Exception(_("Obsoleted packages remaining"))
 
-def remove_replaced_packages(replaced):
-    if remove(replaced, ignore_dep=True, ignore_safety=True):
+def remove_replaced_packages(replaced, filesdb=None):
+    if remove(replaced, ignore_dep=True, ignore_safety=True, filesdb=filesdb):
         raise Exception(_("Replaced package remains"))
diff -Naur pisi~/operations/upgrade.py pisi/operations/upgrade.py
--- pisi~/operations/upgrade.py	2014-06-01 15:10:14.000000000 +0200
+++ pisi/operations/upgrade.py	2014-06-03 23:03:17.000000000 +0200
@@ -205,6 +205,7 @@
         ctx.ui.info(util.colorize(_("Downloading %d / %d") % (order.index(x)+1, len(order)), "yellow"))
         install_op = atomicoperations.Install.from_name(x)
         paths.append(install_op.package_fname)
+        install_op = None
 
     # fetch to be upgraded packages but do not install them.
     if ctx.get_option('fetch_only'):
@@ -219,6 +220,7 @@
         ctx.ui.info(util.colorize(_("Installing %d / %d") % (paths.index(path)+1, len(paths)), "yellow"))
         install_op = atomicoperations.Install(path, ignore_file_conflicts = True)
         install_op.install(not ctx.get_option('compare_sha1sum'))
+        install_op = None
 
 def plan_upgrade(A, force_replaced=True, replaces=None):
     # FIXME: remove force_replaced
